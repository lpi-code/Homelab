---
- name: Deploy Proxmox Infrastructure with Terraform
  hosts: pve
  become: yes
  gather_facts: no
  collections:
    - community.general
  
  vars:
    token_name: "{{ terraform_vars.token_name | default('terraform-token') }}"
    # Tunnel configuration
    tunnel_local_port: "{{ terraform_vars.tunnel_local_port | default(5800) }}"
    tunnel_remote_host: "{{ inventory_hostname }}"
    tunnel_remote_port: "{{ terraform_vars.tunnel_remote_port | default(8006) }}"
    tunnel_pid_file: "/tmp/terraform_tunnel_{{ terraform_vars.tunnel_local_port | default(5800) }}.pid"
  
  pre_tasks:
    - name: Check if storage pool exists
      command: pvesm status
      register: storage_status
      changed_when: false
      
    - name: Extract available storage pool names
      set_fact:
        available_storage_pools: "{{ storage_status.stdout_lines | map('regex_replace', '^([^\\s]+).*', '\\1') | list }}"

    - name: Verify storage pool is available
      fail:
        msg: "Storage pool '{{ proxmox_default_storage_pool }}' not found. Available pools: {{ available_storage_pools }}"
      when: proxmox_default_storage_pool is not defined or proxmox_default_storage_pool not in available_storage_pools

    - name: Check if terraform directory exists
      stat:
        path: "{{ terraform_dir }}"
      register: terraform_dir_stat
      changed_when: false
      delegate_to: localhost
      become: no
    
    - name: Fail if terraform directory does not exist
      fail:
        msg: "Terraform directory does not exist"
      when: not terraform_dir_stat.stat.exists
      delegate_to: localhost
      become: no

    # SSH Tunnel Setup for Terraform Proxy
    - name: Check if tunnel port is available
      wait_for:
        port: "{{ tunnel_local_port }}"
        state: stopped
        timeout: 1
      register: tunnel_port_check
      delegate_to: localhost
      become: no
      ignore_errors: true
      changed_when: false
      
    - name: Fail if tunnel port is already in use
      fail:
        msg: "Port {{ tunnel_local_port }} is already in use. Please choose a different port or stop the service using it."
      when: tunnel_port_check.failed
      delegate_to: localhost
      become: no
      
    - name: Create SOCKS proxy tunnel to PVE node
      shell: |
        ssh -f -N -D {{ tunnel_local_port }} {{ ansible_user }}@{{ inventory_hostname }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        echo $! > {{ tunnel_pid_file }}
      register: tunnel_create_result
      delegate_to: localhost
      become: no

    - name: Wait for tunnel to be ready
      wait_for:
        port: "{{ tunnel_local_port }}"
        host: "127.0.0.1"
        timeout: 10
      delegate_to: localhost
      become: no
      
    - name: Remove any existing .terraformrc file
      file:
        path: "{{ terraform_dir }}/.terraformrc"
        state: absent
      delegate_to: localhost
      become: no
      ignore_errors: true
      changed_when: false

    - name: Test SOCKS tunnel connectivity
      shell: |
        curl -s --socks5 127.0.0.1:{{ tunnel_local_port }} https://{{ inventory_hostname }}:8006/api2/json/version
      register: tunnel_test
      delegate_to: localhost
      become: no
      ignore_errors: true
      changed_when: false
      
    - name: Display tunnel test results
      debug:
        msg: 
          - "SOCKS tunnel test result: {{ tunnel_test.stdout if tunnel_test.stdout is defined else 'Failed' }}"
          - "Registry tunnel test result: {{ registry_tunnel_test.status if registry_tunnel_test.status is defined else 'Failed' }}"
          - "Registry curl test: {{ registry_curl_test.stdout if registry_curl_test.stdout is defined else 'Failed' }}"
      delegate_to: localhost
      become: no
      when: ansible_check_mode == true

  tasks:
    # Terraform execution tasks using community.general.terraform module with OpenTofu
    - name: Apply the Terraform configuration
      block:
        - name: Initialize Terraform with OpenTofu
          community.general.terraform:
            project_path: "{{ terraform_dir }}"
            force_init: true
            binary_path: "/usr/bin/tofu"
            workspace: "default"
            backend_config: {}
            variables: "{{ terraform_variables }}"
          environment:
            http_proxy: "socks5://127.0.0.1:{{ tunnel_local_port }}"
            https_proxy: "socks5://127.0.0.1:{{ tunnel_local_port }}"
            HTTP_PROXY: "socks5://127.0.0.1:{{ tunnel_local_port }}"
            HTTPS_PROXY: "socks5://127.0.0.1:{{ tunnel_local_port }}"
            no_proxy: "localhost,127.0.0.1,registry.opentofu.org"
            NO_PROXY: "localhost,127.0.0.1,registry.opentofu.org"
          register: terraform_init_result
          delegate_to: localhost
          become: no
          when: terraform_variables is defined
      always:
        - name: Find PID of tunnel process
          ansible.builtin.pids:
            pattern: "ssh -f -N -D {{ terraform_vars.tunnel_local_port | default(5800) }} {{ ansible_user }}@{{ inventory_hostname }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
          register: tunnel_pid
          delegate_to: localhost
          become: no
        - name: Kill tunnel process
          ansible.builtin.command:
            cmd: "kill -9 {{ item }}"
          with_items: "{{ tunnel_pid.pids }}"
          delegate_to: localhost
          become: no
